* 改进请求分发

* 回应如何设计，内存缓冲，文件读，FastCGI 接口
* 如何设计配置文件，并且提供一个无需配置文件的运行
* url pattern

* optimize performance from allocing memory by pool
* 负载均衡
* 文件读取优化, sendfile
* 优化程序阅读《computer system》中第五章「优化程序性能」
* support IPv6
* 为读套接字设计读低水位，减少不必要的唤醒
* 改进锁的实现
* 对于 force 请求性能不正常
* http_parse_request_head 可以优化


* HTTP/0.9 如何工作
  不保持链接，无法协商内容，不返回媒体类型
  只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。
  不计划支持!

Ref: https://zhuanlan.zhihu.com/p/23366045
* HTTP/1.0 如何工作
  没有 Host
  没有复用连接，一个请求对应一个连接
  HTTP 响应状态码：在响应的第一行，首先返回状态码和说明文本。相当于在 HTTP 0.9 基础上增加了返回类型的支持。
  HTTP 头：除了首行的动词和路径之外，请求和响应都支持一系列的「头」。这些「头」以键值对的形式出现，为当时和日后 HTTP 的各种周边设置提供了载体。
  HTTP 方法：增加了 HEAD 和 POST 等方法。

* HTTP/1.1 如何工作，暂时除去缓冲和认证代理部分
  1. 身份验证
  2. 状态管理 101, 203, 205 等
  3. Cache

+ Trailer 允许在回应后部添加额外的 Header Field
+ linux 下 semaphore 文件存储于 /dev/shm/sem.xxx
+ 考虑超时节点的插入，来确定选取什么结构
  添加请求超时是有序的，采用 lru 结构!

阅读源码需要关注的问题
----------------------
1. 超时处理
2. free 和 重用 request 问题
3. 是否时事件驱动
4. 解析 HTTP 如何与事件循环结合
5. post 之类请求如何处理，request 的后续 body 如何处理
etc


已经大体阅读
------------
1. boa server
  其采用类似于事件驱动来做，维护 request 链，解析处理 HTTP 通过内部状态机，没有高级特性
  根据发送完毕来决定 free_request，其中通过请求的信息来判断是否时真的销毁这个 request，并且还有超时处理
2. lighttpd
  采用 server 这个结构体存储配置信息，对每个 connection 构建一个状态机，连接的处理也是在状态机里
3. nginx
  采用 xxx_config 存储配置信息，主题结构维护在 cycle 里

  事件循环
  ngx_process_events_and_timers 处理事件，先找出即将超时的 timer，然后调用不同实现的 ngx_process_events(cycle, timer, flags)
  然后 ngx_events_process_posted 处理 posted_accept_events 和 posted_events，并且在 posted_accept_events 后处理已经超时的链接
  整个事件循环在 ngx_worker_process_cycle 里处理 cycle 和各种信号的标记
  先抢锁在处理事件

  连接 connection_t 里包含 http_connection 对象

  设置为 nonblock 然后优先尝试读取一下，加快处理

  超时处理时把 ev->timeout 标记，然后调用 ev->handle(ev) 处理，相关事件里会有处理超时的代码

  事件结构体在初始化时通过 pool 来管理，而且使用了重用
